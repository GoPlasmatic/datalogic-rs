[
    "Testing out scopes",
    {
        "description": "Climb up to get adder",
        "rule": { "map": [[1,2,3], { "+": [{ "val": [] }, { "val": [[-2], "adder"] }] }] },
        "data": { "adder": 10 },
        "result": [11,12,13]
    },
    {
        "description": "Climb up to get index",
        "rule": { "map": [[1,2,3], { "+": [{ "val": [] }, { "val": [[-1], "index"] }] }] },
        "data": { "adder": 10 },
        "result": [1,3,5]
    },
    {
        "description": "Nested get adder",
        "rule": {
            "map": [["Test"], { "map": [[1,2,3], { "+": [{"val": []}, {"val": [[-4], "adder"]}] }]} ]
        },
        "data": { "adder": 10 },
        "result": [[11,12,13]]
    },
    {
        "description": "Val with numeric array index - access first element",
        "rule": {"val": [[0], "items", 0, "name"]},
        "data": {
            "items": [
                {"name": "first", "value": 10},
                {"name": "second", "value": 20}
            ]
        },
        "result": "first"
    },
    {
        "description": "Val with numeric array index - access second element",
        "rule": {"val": [[0], "items", 1, "value"]},
        "data": {
            "items": [
                {"name": "first", "value": 10},
                {"name": "second", "value": 20}
            ]
        },
        "result": 20
    },
    {
        "description": "Val with level access in all operator - all match first currency",
        "rule": {
            "all": [
                {"var": "fields.#"},
                {
                    "==": [
                        {"val": ["32B", "currency"]},
                        {"val": [[1], "fields", "#", 0, "32B", "currency"]}
                    ]
                }
            ]
        },
        "data": {
            "fields": {
                "#": [
                    {"32B": {"amount": 100, "currency": "GBP"}},
                    {"32B": {"amount": 200, "currency": "GBP"}},
                    {"32B": {"amount": 300, "currency": "GBP"}}
                ]
            }
        },
        "result": true
    },
    {
        "description": "Val with level access in all operator - not all match (negative case)",
        "rule": {
            "all": [
                {"var": "fields.#"},
                {
                    "==": [
                        {"val": ["32B", "currency"]},
                        {"val": [[1], "fields", "#", 0, "32B", "currency"]}
                    ]
                }
            ]
        },
        "data": {
            "fields": {
                "#": [
                    {"32B": {"amount": 100, "currency": "GBP"}},
                    {"32B": {"amount": 200, "currency": "USD"}},
                    {"32B": {"amount": 300, "currency": "GBP"}}
                ]
            }
        },
        "result": false
    },
    {
        "description": "Val with nested array access using numeric indices",
        "rule": {"val": [[0], "matrix", 1, 2]},
        "data": {
            "matrix": [
                [1, 2, 3],
                [4, 5, 6],
                [7, 8, 9]
            ]
        },
        "result": 6
    },
    {
        "description": "Val with level access in map - access parent array element by index",
        "rule": {
            "map": [
                [10, 20, 30],
                {
                    "+": [
                        {"val": []},
                        {"val": [[1], 0]}
                    ]
                }
            ]
        },
        "data": [100, 200, 300],
        "result": [110, 120, 130]
    },
    {
        "description": "Val with invalid numeric index returns null",
        "rule": {"val": [[0], "items", 10, "name"]},
        "data": {
            "items": [
                {"name": "first"},
                {"name": "second"}
            ]
        },
        "result": null
    },
    {
        "description": "Val with numeric index on non-array returns null",
        "rule": {"val": [[0], "items", 0]},
        "data": {
            "items": "not an array"
        },
        "result": null
    },
    {
        "description": "Val with mixed string and numeric path segments",
        "rule": {"val": [[0], "data", "arrays", 0, "values", 1]},
        "data": {
            "data": {
                "arrays": [
                    {"values": [10, 20, 30]},
                    {"values": [40, 50, 60]}
                ]
            }
        },
        "result": 20
    }
]